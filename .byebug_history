exit
 [parser_colon[0], parser_colon[3]].reject(&:empty?)
 [parser_colon[0], parser_colon[3]]
 [parser_colon[0], parser_colon[3]
parser_colon[3]]
exit
[parser_colon[0], parser_colon[3]]
[parser_colon[0], parser_colon[2]]
parser_colon = row["size"].split(" ")
row["size"].split(" ").length
parser_colon[1]
parser_colon[0]
parser_colon
[parser_colon[0], parser_colon[2]]
row["size"].split(" ").length
row["size"].split(" ")[0]
row["size"].split(" ").length
row["size"].split(" ")
row["size"].split(":")
row["size"]
row[:size]
row
parser_colon
exit
 [parser_colon[0]]
parser_colon
 [parser_colon[0].to_i]
parser_colon[0]
exit
(parser_dash[0].to_i..parser_dash[1].to_i).to_a
parser_dash
exit
parser_colon[0].to_i
  [parser_colon[0]].to_i
  [parser_colon[0]]
exit
 type_parser == parser_colon
type_parser == parser_dash
type_parser = [parser_dash, parser_colon].max_by(&:length)
[parser_dash, parser_colon].max_by(&:length)
row["size"].split(":")
row["size"].split("-")
[parser_dash, parser_colon].map(&:max)
[parser_dash, parser_colon]
parser_dash
parser_colon.length
parser_colon
parser_dash
type_parser
type_parser == parser_dash
type_parser = [parser_dash, parser_colon].max
type_parser
[parser_dash, parser_colon]
[parser_dash, parser_colon].max
type_parser
type_parser = [parser_dash, parser_colon].max_by(&:length)
[parser_dash, parser_colon].max_by(&:length)
[parser_dash, parser_colon].select {|x| x.max['value'] 
type_parser
exit
[parser_colon[0]]
parser_colon[0].to_a
parser_colon[0]
parser_colon
parser_colon[0]
parser_colon[0].to_a
parser_colon[0]
(parser_colon[0]).to_a
parser_colon[0]
parser_colon
[parser_dash, parser_colon].max_by(&:length)
[parser_dash, parser_colon].select {|x| x.max['value'] }
parser_colon = row["size"].split(":")
parser_dash = row["size"].split("-")
 row["size"].split("-").length
 row["size"].split(":").length
 row["size"].split(":")
 row["size"]
exit
Header.all.where(male: true).count
Header.all.where(male: true)
Header.all
Header.all.group_by(&:male)[0]
Header.all.group_by(&:male)[:true]
Header.all.group_by(&:male)
Header.all.group_by(&:male)["false"]
Header.all.group_by(&:male)[:false]
Header.all.group_by(&:male)
Header.all.group_by(&:male).male
Header.all.group_by(&:male)
Header.all.group_by(:male)
exit
row["male"].present?
row["male"]
row
row[:male]
row
